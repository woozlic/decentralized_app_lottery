{"version":3,"sources":["web3.js","contractConfig.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","window","Web3","currentProvider","address","contractInfo","abi","contract","eth","Contract","App","state","manager","players","balance","balanceEther","value","message","isMetaMaskPluginAvailable","isTransactionIsRunning","startWarning","errorMessage","onSubmit","event","a","preventDefault","setState","metaMaskNotAvailable","ethereum","enable","getAccounts","accounts","lottery","methods","enter","send","from","utils","toWei","updateContractInfo","onClickPickWinner","pickWinner","onClickUpdateAnnouncement","this","fetch","then","res","json","balanceWei","catch","console","log","className","inputForm","announcements","rules","target","rel","href","onClick","length","id","type","name","placeholder","onChange","active","spinner","text","mainWindow","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afb950b7.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst web3 = window.web3 ? new Web3(window.web3.currentProvider) : null;\n\nexport default web3;\n","const contractAddress = '0x8C9815E2372bC6F9Dec915751B31666aB08b2edb';\nconst contractAbi = [{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\nexport default { contractAddress, contractAbi };","import web3 from './web3';\nimport contractInfo from './contractConfig';\n\nconst address = contractInfo.contractAddress;\nconst abi = contractInfo.contractAbi;\nconst contract = web3 ? new web3.eth.Contract(abi, address) : null;\n\nexport default contract;\n","import React from 'react';\nimport LoadingOverlay from 'react-loading-overlay';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\nimport contractInfo from './contractConfig';\n\nclass App extends React.Component {\n  state = {\n    manager: '',\n    players: [],\n    balance: '',\n    balanceEther: '',\n    value: '',\n    message: '',\n    isMetaMaskPluginAvailable: false,\n    isTransactionIsRunning: false,\n    startWarning: false,\n    errorMessage: ''\n  };\n\n  async componentDidMount() {\n    const isMetaMaskPluginAvailable = web3 && lottery;\n    this.setState({ isMetaMaskPluginAvailable });\n    this.updateContractInfo();\n  }\n\n  async updateContractInfo() {\n    fetch('/api/contract-info')\n      .then(res => res.json())\n      .then(({ manager, players, balanceWei: balance, balanceEther }) => {\n        this.setState({ manager, players, balance, balanceEther });\n      })\n      .catch(console.log);\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      errorMessage: ''\n    });\n    const { isMetaMaskPluginAvailable } = this.state;\n    if (!isMetaMaskPluginAvailable) {\n      return this.metaMaskNotAvailable();\n    }\n\n    await window.ethereum.enable();\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      message: 'Transaction is processing. This might take 12 to 30 seconds.',\n      isTransactionIsRunning: true\n    });\n    try {\n      await lottery.methods.enter().send({\n        from: accounts[0],\n        value: web3.utils.toWei(this.state.value, 'ether')\n      });\n      this.updateContractInfo();\n      this.setState({\n        message: 'You entered to the lottery',\n        value: ''\n      });\n    } catch (err) {\n      this.setState({\n        errorMessage: err.message\n      });\n    }\n    this.setState({ isTransactionIsRunning: false });\n  };\n\n  onClickPickWinner = async event => {\n    event.preventDefault();\n    const { isMetaMaskPluginAvailable } = this.state;\n    if (!isMetaMaskPluginAvailable) {\n      return this.metaMaskNotAvailable();\n    }\n\n    await window.ethereum.enable();\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      message: 'Transaction is processing. This might take 9 to 15 seconds.',\n      isTransactionIsRunning: true\n    });\n\n    try {\n      await lottery.methods.pickWinner().send({\n        from: accounts[0]\n      });\n    } catch (ex) {}\n\n    this.setState({\n      message: 'Winner picked'\n    });\n\n    this.setState({ isTransactionIsRunning: false });\n  };\n\n  metaMaskNotAvailable = () => {\n    this.setState({\n      startWarning: true\n    });\n  };\n\n  onClickUpdateAnnouncement = () => {\n    this.updateContractInfo();\n  };\n\n  mainWindow() {\n    const {\n      isMetaMaskPluginAvailable,\n      startWarning,\n      errorMessage\n    } = this.state;\n    return (\n      <div className='container-contact100'>\n        <div className='wrap-contact100'>\n          <form\n            onSubmit={this.onSubmit}\n            className='contact100-form validate-form'\n          >\n            <span className='contact100-form-title'>Try Your Luck</span>\n            {!isMetaMaskPluginAvailable && !startWarning && (\n              <div className='metamask-not-found'>Metamask Not Found</div>\n            )}\n            {!isMetaMaskPluginAvailable && startWarning && (\n              <div className='metamask-not-found warning'>\n                Metamask Not Found\n              </div>\n            )}\n            {errorMessage && (\n              <div className='metamask-not-found error-message'>\n                {errorMessage}\n              </div>\n            )}\n            {this.inputForm()}\n            {this.announcements()}\n          </form>\n          {this.rules()}\n        </div>\n      </div>\n    );\n  }\n\n  rules() {\n    return (\n      <div className='contact100-more flex-col-c-m'>\n        <div className='flex-w size1 p-b-47'>\n          <div className='txt1 p-r-25'>\n            <span className='lnr lnr-book'></span>\n          </div>\n\n          <div className='flex-col size2'>\n            <span className='txt1 p-b-20'>Decentralized Lottery App</span>\n\n            <span className='txt2'>\n              This lottery contract has a prize pool and a list of people who\n              have entered the prize pool. People send some amount of\n              money(ether) in the contract. As soon as people send some amount\n              of money, they are being recorded as a player. Ethers, that the\n              players send, directly goes to the contract account. After a\n              certain times, contract manager make the contract to pick a\n              winner. Then the contract pick a winner randomly and transfer all\n              money from the prize pool to the winner. At that point, the\n              lottery contract resets and becomes ready to accept a new list of\n              players.\n            </span>\n\n            <div className='contract-info-container'>\n              <div>Contract Address: {contractInfo.contractAddress}</div>\n              <div>\n                Monitor Contract Transaction in{' '}\n                <a\n                  target='_blank'\n                  rel='noopener noreferrer'\n                  className='remote-link'\n                  href='https://rinkeby.etherscan.io/tx/0x3349da25727612e32d292b2fd1f1d2ac5d07b35b9b0f62f356f60d3aa65c6241'\n                >\n                  EtherScan\n                </a>\n              </div>\n              <div>\n                Source Code:{' '}\n                <a\n                  target='_blank'\n                  rel='noopener noreferrer'\n                  className='remote-link'\n                  href='https://github.com/bmshamsnahid/Decentralized-Lottery-App'\n                >\n                  Github\n                </a>\n              </div>\n              <div>\n                Inspired from{' '}\n                <a\n                  target='_blank'\n                  rel='noopener noreferrer'\n                  className='remote-link'\n                  href='https://www.udemy.com/course/ethereum-and-solidity-the-complete-developers-guide'\n                >\n                  Stephen Grider Course\n                </a>\n              </div>\n              <div>\n                Powered By{' '}\n                <a\n                  target='_blank'\n                  rel='noopener noreferrer'\n                  className='remote-link'\n                  href='https://www.ethereum.org/'\n                >\n                  Ethereum Network\n                </a>\n              </div>\n              <div>\n                Developed By{' '}\n                <a\n                  target='_blank'\n                  rel='noopener noreferrer'\n                  className='remote-link'\n                  href='https://shams-nahid.herokuapp.com/'\n                >\n                  Shams Nahid\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  announcements() {\n    const { manager, players, balanceEther } = this.state;\n    return (\n      <div className='announcement-container'>\n        <div className='announcement-title'>\n          Announcements\n          <div\n            className='refresh-button'\n            onClick={this.onClickUpdateAnnouncement}\n          >\n            <span className='refresh-text'>Update Announcements</span>\n            <span className='lnr lnr-sync refresh-icon'></span>\n          </div>\n        </div>\n        <div className='announcement-section'>\n          <span className='lnr lnr-bullhorn announcement-icon'></span>\n          <div className='announcement-status'>\n            Minimum <span className='marked-number'>0.10</span> ether is\n            required.\n          </div>\n        </div>\n        <div className='announcement-section'>\n          <span className='lnr lnr-bullhorn announcement-icon'></span>\n          <div className='announcement-status'>\n            The contract is managed by{' '}\n            <span className='manager-address'>{manager}</span>.\n          </div>\n        </div>\n        <div className='announcement-section'>\n          <span className='lnr lnr-bullhorn announcement-icon'></span>\n          <div className='announcement-status'>\n            Total <span className='marked-number'>{players.length}</span>{' '}\n            players already joined here.\n          </div>\n        </div>\n        <div className='announcement-section'>\n          <span className='lnr lnr-bullhorn announcement-icon'></span>\n          <div className='announcement-status'>\n            You may win <span className='marked-number'>{balanceEther}</span>{' '}\n            ether !!!.\n          </div>\n        </div>\n        <div className='manager-section'>\n          <div className='manager-warning'>(Only For Contract Manager)</div>\n          <button onClick={this.onClickPickWinner} className='custom-button'>\n            Pick Winner\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  inputForm() {\n    return (\n      <div>\n        <div className='wrap-input100 validate-input'>\n          <input\n            id='email'\n            className='input100'\n            type='text'\n            name='email'\n            placeholder='Example: 0.50'\n            value={this.state.value}\n            onChange={event => this.setState({ value: event.target.value })}\n          />\n          <span className='focus-input100'></span>\n        </div>\n        <div className='container-contact100-form-btn'>\n          <button className='contact100-form-btn'>Join</button>\n        </div>\n        <span className='network-warning'>\n          This app is running on Rinkeby test network and dealing with fake\n          ether.\n        </span>\n      </div>\n    );\n  }\n\n  render() {\n    const { isTransactionIsRunning, message } = this.state;\n    return (\n      <LoadingOverlay active={isTransactionIsRunning} spinner text={message}>\n        {this.mainWindow()}\n      </LoadingOverlay>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}